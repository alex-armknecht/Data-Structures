/**
 * Classwork 6 - Report
 * Collect all answers to runtime analysis problems here.
 * 
 * GROUP MEMBERS:
 *   1. - Alex Armknecht 
 *   2. - Anna Garren
 *   3. - Halle Powell
 */


// [!] IF UNSURE OF ANY ANSWER FORMATS, SEE THE EXAMPLE ON
//     THE CW 6 SPEC FOR checkAndGrow

 
// -------------------------------------------------------
// Problem 1
// -------------------------------------------------------

/**
 * Assumptions:
 *  - Let n be the number of words in the array.
 *  - Worst Case Assumption: if the word is not in the array of words then the 
 *    loop would have to iterate though every item in the array.
 */

/**
 * Returns the number of unique, unrepeated words that are found
 * in the given sentence sent
 * NOTE: This solution is not very good!!! It can be simplified
 * by using ArrayLists, but even those aren't the best choice here!
 * @param sent The sentence in which to count unique words
 * @return The number of unique, unrepeated words in sent
 */
public static int uniqueWords (String sent) {
    String[] words = sent.split(" ");							//c_1 * n
    String currWord, compWord;									//c_2
    int count = 0;												//c_3

    // Compare each pair of words (again, warning: not great)
    for (int i = 0; i < words.length; i++) {					//c_4 * n 
        boolean repeatFound = false;							//c_5 * n
        currWord = words[i];									//c_6 * n
        if (currWord.equals("")) { continue; }					//c_7 * n
        
        for (int j = 0; j < words.length; j++) {				//c_8 * n^2
            compWord = words[j];								//c_9 * n^2
            if (currWord.equals(compWord) && i != j) {			//c_10 * n^2
                repeatFound = true;								
                break;
            }
        }
        
        // Only increment the count for the first occurrence of each match
        count += (repeatFound) ? 0 : 1;							//c_11 * n
    }

    return count;												//c_12
}

/*
 * Total Cost Analysis: (c_2 + c_3 + c_12) + (n(c_1 + c_4 + c_5 + c_6 + c_7 + c_11)) + n^2(c_8 + c_9 + c_10)
 						= O(n^2)
 */
 
 
// -------------------------------------------------------
// Problem 2
// -------------------------------------------------------

/**
 * Assumptions:
 *  - Let n be the length of the arrayList arr
 *  - Worst Case Assumption: if both the arrayLists are completely filled.
 */
public static ArrayList<String> reverse_A (ArrayList<String> arr) {
    ArrayList<String> result = new ArrayList<String>();					//c_1
    for (int i = 0; i < arr.size(); i++) {								//c_2 * n
        result.add(0, arr.get(i));										//c_3 * n^2
    }
    return result;														//c_4
}
  
public static ArrayList<String> reverse_B (ArrayList<String> arr) {
    ArrayList<String> result = new ArrayList<String>();					//c_1 
    for (int i = arr.size() - 1; i >= 0; i--) {							//c_2 * n
        result.add(arr.get(i));											//c_3 * n
    }
    return result;														//c_4
}

/*
 * Total Cost Analysis: (c_1 + c_4) + n(c_2) + n^2(c_3) = O(n^2)
 						(c_1 + c_4) + n(c_2 + c_3) = O(n)
 */
 
 
// -------------------------------------------------------
// Problem 3
// -------------------------------------------------------

/**
 * Assumptions:
 *  - Let n be the length of a1
 *  - Worst Case Assumption: if the first array is not a subset of the second array 
 		because then the program has to iterate fully through both for loops.
 */
public static boolean isSubset (int[] a1, int[] a2) {
    for (int i = 0; i < a1.length; i++) {				//c_1 * n 
        boolean contained = false;						//c_2 * n 
        for (int j = 0; j < a2.length; j++) {			//c_3 * n * m
            if (a1[i] == a2[j]) {						//c_4 * n * m
                contained = true;						//c_5 * n
                break; 									//c_6 * n
            }
        }
        if (!contained) {return false;}
    }
    return true;										//c_7
}

/*
 * Total Cost Analysis: c_7 + n(c_1 + c_2 + c_5 + c_6 + m(c_3 + c_4))
 						= O(nm)
 						= O(n)
 */
 
 
// -------------------------------------------------------
// FINAL ANSWERS
// Please collect your final answers to the above, below.
// Example: 3. O(n^4)
// -------------------------------------------------------

1.  O(n^2)
2A. O(n^2)
2B. O(n)
3.  O(n)